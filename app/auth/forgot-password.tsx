import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import * as Haptics from 'expo-haptics';
import { useRouter } from 'expo-router';
import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';
import {
  ActivityIndicator,
  Alert,
  Animated,
  Dimensions,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { API_URL } from '../../config/api';
import { getHeaders } from '../../config/fetch';

// –¢–∏–ø—ã –¥–ª—è TypeScript
interface ValidationErrors {
  email?: string;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã (—Å–∏–Ω–µ-–±–µ–ª–∞—è)
const COLORS = {
  primary: '#2563EB',
  secondary: '#3B82F6',
  accent: '#60A5FA',
  background: '#F8FAFC',
  white: '#FFFFFF',
  gray: '#94A3B8',
  darkGray: '#64748B',
  error: '#EF4444',
  success: '#10B981',
} as const;

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');
const isSmallScreen = SCREEN_WIDTH < 375;
const isMediumScreen = SCREEN_WIDTH >= 375 && SCREEN_WIDTH < 768;

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
const ForgotPasswordScreen: React.FC = () => {
  const router = useRouter();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const [errors, setErrors] = useState<ValidationErrors>({});
  const [touched, setTouched] = useState({ email: false });

  // –ê–Ω–∏–º–∞—Ü–∏–∏
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const shakeAnim = useRef(new Animated.Value(0)).current;
  const successAnim = useRef(new Animated.Value(0)).current;

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 600,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
  useEffect(() => {
    if (emailSent) {
      Animated.spring(successAnim, {
        toValue: 1,
        tension: 50,
        friction: 7,
        useNativeDriver: true,
      }).start();
    }
  }, [emailSent]);

  // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  const shakeAnimation = useCallback(() => {
    Animated.sequence([
      Animated.timing(shakeAnim, { toValue: 10, duration: 50, useNativeDriver: true }),
      Animated.timing(shakeAnim, { toValue: -10, duration: 50, useNativeDriver: true }),
      Animated.timing(shakeAnim, { toValue: 10, duration: 50, useNativeDriver: true }),
      Animated.timing(shakeAnim, { toValue: 0, duration: 50, useNativeDriver: true }),
    ]).start();
  }, [shakeAnim]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const validateForm = useCallback((value: string): string | undefined => {
    if (!value.trim()) {
      return 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }
    if (!validateEmail(value)) {
      return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }
    return undefined;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è email —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleEmailChange = useCallback((text: string) => {
    setEmail(text);
    if (touched.email) {
      const error = validateForm(text);
      setErrors({ email: error });
    }
  }, [touched.email, validateForm]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
  const handleBlur = useCallback(() => {
    setTouched({ email: true });
    const error = validateForm(email);
    setErrors({ email: error });
  }, [email, validateForm]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  const handleResetPassword = useCallback(async () => {
    // –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–µ –∫–∞–∫ "—Ç—Ä–æ–Ω—É—Ç–æ–µ"
    setTouched({ email: true });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const emailError = validateForm(email);

    if (emailError) {
      setErrors({ email: emailError });
      shakeAnimation();
      if (Platform.OS !== 'web') {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      }
      return;
    }

    setLoading(true);
    console.log('üîë –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è:', email);

    try {
      const response = await fetch(`${API_URL}/api/auth/forgot-password`, {
        method: 'POST',
        headers: getHeaders(),
        body: JSON.stringify({ email }),
      });

      const data = await response.json();
      console.log('üì¶ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (data.success || response.ok) {
        console.log('‚úÖ –ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        
        // Haptic feedback –Ω–∞ —É—Å–ø–µ—Ö
        if (Platform.OS !== 'web') {
          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
        }

        setEmailSent(true);
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ:', data.error);
        shakeAnimation();
        if (Platform.OS !== 'web') {
          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
        }
        Alert.alert(
          '–û—à–∏–±–∫–∞',
          data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è'
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      // (—á—Ç–æ–±—ã –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –Ω–µ –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email)
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      setEmailSent(true);
      
      if (Platform.OS !== 'web') {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }
    } finally {
      setLoading(false);
    }
  }, [email, validateForm, shakeAnimation]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  const handleGoToLogin = useCallback(() => {
    if (Platform.OS !== 'web') {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
    router.push('/auth/login');
  }, [router]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  const handleResendEmail = useCallback(() => {
    if (Platform.OS !== 'web') {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
    setEmailSent(false);
    setEmail('');
    setErrors({});
    setTouched({ email: false });
    successAnim.setValue(0);
  }, [successAnim]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
  const adaptiveStyles = useMemo(() => ({
    logoSize: isSmallScreen ? 50 : isMediumScreen ? 60 : 70,
    titleSize: isSmallScreen ? 26 : isMediumScreen ? 32 : 36,
    subtitleSize: isSmallScreen ? 14 : 16,
    inputHeight: isSmallScreen ? 52 : 56,
    buttonHeight: isSmallScreen ? 52 : 56,
    padding: isSmallScreen ? 16 : 20,
  }), []);

  return (
    <SafeAreaView style={styles.safeArea} edges={['top', 'bottom']}>
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <LinearGradient
          colors={[COLORS.primary, COLORS.secondary, COLORS.accent]}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 1 }}
          style={styles.gradient}
        >
          <ScrollView
            contentContainerStyle={styles.scrollContent}
            showsVerticalScrollIndicator={false}
            keyboardShouldPersistTaps="handled"
          >
            <Animated.View
              style={[
                styles.content,
                {
                  opacity: fadeAnim,
                  transform: [{ translateY: slideAnim }],
                  paddingHorizontal: adaptiveStyles.padding,
                },
              ]}
            >
              {!emailSent ? (
                <>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                  <View style={styles.header}>
                    <View style={[styles.logoContainer, { width: adaptiveStyles.logoSize + 40, height: adaptiveStyles.logoSize + 40, borderRadius: (adaptiveStyles.logoSize + 40) / 2 }]}>
                      <Ionicons name="key" size={adaptiveStyles.logoSize} color={COLORS.white} />
                    </View>
                    <Text style={[styles.title, { fontSize: adaptiveStyles.titleSize }]}>
                      –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                    </Text>
                    <Text style={[styles.subtitle, { fontSize: adaptiveStyles.subtitleSize }]}>
                      –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    </Text>
                  </View>

                  {/* –§–æ—Ä–º–∞ */}
                  <Animated.View
                    style={[
                      styles.formContainer,
                      { transform: [{ translateX: shakeAnim }] },
                    ]}
                  >
                    {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
                    <View style={styles.instructionContainer}>
                      <Ionicons name="information-circle" size={20} color={COLORS.primary} />
                      <Text style={styles.instructionText}>
                        –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email
                      </Text>
                    </View>

                    {/* –ü–æ–ª–µ Email */}
                    <View style={styles.inputWrapper}>
                      <View style={[styles.inputContainer, errors.email && touched.email && styles.inputError, { height: adaptiveStyles.inputHeight }]}>
                        <Ionicons 
                          name="mail-outline" 
                          size={20} 
                          color={errors.email && touched.email ? COLORS.error : COLORS.primary} 
                          style={styles.inputIcon} 
                        />
                        <TextInput
                          style={styles.input}
                          placeholder="Email"
                          placeholderTextColor={COLORS.gray}
                          value={email}
                          onChangeText={handleEmailChange}
                          onBlur={handleBlur}
                          keyboardType="email-address"
                          autoCapitalize="none"
                          autoCorrect={false}
                          autoFocus={true}
                          editable={!loading}
                          returnKeyType="send"
                          onSubmitEditing={handleResetPassword}
                          accessibilityLabel="–ü–æ–ª–µ –≤–≤–æ–¥–∞ email"
                        />
                      </View>
                      {errors.email && touched.email && (
                        <Text style={styles.errorText}>{errors.email}</Text>
                      )}
                    </View>

                    {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                    <TouchableOpacity
                      style={[styles.resetButton, loading && styles.resetButtonDisabled, { height: adaptiveStyles.buttonHeight }]}
                      onPress={handleResetPassword}
                      disabled={loading}
                      accessibilityLabel="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                    >
                      <LinearGradient
                        colors={[COLORS.primary, COLORS.secondary]}
                        start={{ x: 0, y: 0 }}
                        end={{ x: 1, y: 0 }}
                        style={styles.gradientButton}
                      >
                        {loading ? (
                          <ActivityIndicator color={COLORS.white} size="small" />
                        ) : (
                          <>
                            <Ionicons name="paper-plane" size={20} color={COLORS.white} style={styles.buttonIcon} />
                            <Text style={styles.resetButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
                          </>
                        )}
                      </LinearGradient>
                    </TouchableOpacity>

                    {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
                    <View style={styles.loginContainer}>
                      <TouchableOpacity onPress={handleGoToLogin} accessibilityLabel="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É">
                        <View style={styles.backToLoginButton}>
                          <Ionicons name="arrow-back" size={18} color={COLORS.primary} />
                          <Text style={styles.backToLoginText}>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É</Text>
                        </View>
                      </TouchableOpacity>
                    </View>
                  </Animated.View>
                </>
              ) : (
                // –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                <Animated.View
                  style={[
                    styles.successContainer,
                    {
                      opacity: successAnim,
                      transform: [
                        {
                          scale: successAnim.interpolate({
                            inputRange: [0, 1],
                            outputRange: [0.8, 1],
                          }),
                        },
                      ],
                    },
                  ]}
                >
                  <View style={styles.successContent}>
                    <View style={styles.successIconContainer}>
                      <Ionicons name="checkmark-circle" size={80} color={COLORS.success} />
                    </View>
                    
                    <Text style={styles.successTitle}>–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</Text>
                    
                    <Text style={styles.successText}>
                      –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –Ω–∞ –∞–¥—Ä–µ—Å:
                    </Text>
                    
                    <Text style={styles.emailText}>{email}</Text>
                    
                    <View style={styles.successInfoBox}>
                      <Ionicons name="time-outline" size={20} color={COLORS.primary} style={styles.infoIcon} />
                      <Text style={styles.successInfoText}>
                        –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ.
                      </Text>
                    </View>

                    {/* –ö–Ω–æ–ø–∫–∏ */}
                    <TouchableOpacity
                      style={[styles.actionButton, { height: adaptiveStyles.buttonHeight }]}
                      onPress={handleGoToLogin}
                      accessibilityLabel="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É"
                    >
                      <LinearGradient
                        colors={[COLORS.primary, COLORS.secondary]}
                        start={{ x: 0, y: 0 }}
                        end={{ x: 1, y: 0 }}
                        style={styles.gradientButton}
                      >
                        <Text style={styles.actionButtonText}>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É</Text>
                      </LinearGradient>
                    </TouchableOpacity>

                    <TouchableOpacity
                      style={styles.resendButton}
                      onPress={handleResendEmail}
                      accessibilityLabel="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞"
                    >
                      <Text style={styles.resendButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞</Text>
                    </TouchableOpacity>
                  </View>
                </Animated.View>
              )}
            </Animated.View>
          </ScrollView>
        </LinearGradient>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

// –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤
export default React.memo(ForgotPasswordScreen);

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.primary,
  },
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingVertical: 20,
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    minHeight: SCREEN_HEIGHT - 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 32,
  },
  logoContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 5,
  },
  title: {
    fontWeight: 'bold',
    color: COLORS.white,
    marginBottom: 8,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 2 },
    textShadowRadius: 4,
  },
  subtitle: {
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
  },
  formContainer: {
    backgroundColor: COLORS.white,
    borderRadius: 24,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 10,
  },
  instructionContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: COLORS.background,
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
    gap: 10,
  },
  instructionText: {
    flex: 1,
    fontSize: 14,
    color: COLORS.darkGray,
    lineHeight: 20,
  },
  inputWrapper: {
    marginBottom: 20,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.background,
    borderRadius: 12,
    paddingHorizontal: 16,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  inputError: {
    borderColor: COLORS.error,
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#1E293B',
  },
  errorText: {
    color: COLORS.error,
    fontSize: 12,
    marginTop: 4,
    marginLeft: 4,
  },
  resetButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  resetButtonDisabled: {
    opacity: 0.6,
  },
  gradientButton: {
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
  },
  buttonIcon: {
    marginRight: 8,
  },
  resetButtonText: {
    color: COLORS.white,
    fontSize: 18,
    fontWeight: '600',
  },
  loginContainer: {
    alignItems: 'center',
    marginTop: 24,
  },
  backToLoginButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  backToLoginText: {
    color: COLORS.primary,
    fontSize: 14,
    fontWeight: '600',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—Ö–∞
  successContainer: {
    flex: 1,
    justifyContent: 'center',
  },
  successContent: {
    backgroundColor: COLORS.white,
    borderRadius: 24,
    padding: 32,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 10,
  },
  successIconContainer: {
    marginBottom: 24,
  },
  successTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: 12,
    textAlign: 'center',
  },
  successText: {
    fontSize: 16,
    color: COLORS.darkGray,
    textAlign: 'center',
    marginBottom: 12,
    lineHeight: 24,
  },
  emailText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.primary,
    marginBottom: 24,
    textAlign: 'center',
  },
  successInfoBox: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: COLORS.background,
    padding: 16,
    borderRadius: 12,
    marginBottom: 32,
  },
  infoIcon: {
    marginRight: 10,
    marginTop: 2,
  },
  successInfoText: {
    flex: 1,
    fontSize: 13,
    color: COLORS.darkGray,
    lineHeight: 20,
  },
  actionButton: {
    width: '100%',
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 12,
  },
  actionButtonText: {
    color: COLORS.white,
    fontSize: 18,
    fontWeight: '600',
  },
  resendButton: {
    paddingVertical: 12,
  },
  resendButtonText: {
    color: COLORS.primary,
    fontSize: 14,
    fontWeight: '600',
  },
});
