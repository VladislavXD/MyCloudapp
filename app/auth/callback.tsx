import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Platform, StyleSheet, Text, View } from 'react-native';
import { useAuth } from '../context/AuthContext';


export default function CallbackScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const { signIn } = useAuth();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    handleCallback();
  }, []);

  const handleCallback = async () => {
    try {
      console.log('üîÑ Callback params:', params);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É
      if (params.error) {
        console.error('‚ùå Auth error from server:', params.error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ popup –æ–∫–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
        if (Platform.OS === 'web' && typeof window !== 'undefined' && window.opener) {
          window.opener.postMessage({
            type: 'GOOGLE_AUTH_ERROR',
            error: params.error
          }, window.location.origin);
          window.close();
        } else {
          setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google');
          setTimeout(() => router.replace('/auth/login'), 2000);
        }
        return;
      }
      
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const token = params.token as string;
      const userStr = params.user as string;

      if (!token || !userStr) {
        console.error('‚ùå Missing token or user data');
        
        // –ï—Å–ª–∏ —ç—Ç–æ popup –æ–∫–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
        if (Platform.OS === 'web' && typeof window !== 'undefined' && window.opener) {
          window.opener.postMessage({
            type: 'GOOGLE_AUTH_ERROR',
            error: 'Missing token or user data'
          }, window.location.origin);
          window.close();
        } else {
          setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
          setTimeout(() => router.replace('/auth/login'), 2000);
        }
        return;
      }

      // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = JSON.parse(decodeURIComponent(userStr));
      console.log('‚úÖ User data received:', user);

      // –ï—Å–ª–∏ —ç—Ç–æ popup –æ–∫–Ω–æ (–æ—Ç–∫—Ä—ã—Ç–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ–∫–Ω–∞)
      if (Platform.OS === 'web' && typeof window !== 'undefined' && window.opener) {
        console.log('üì§ Sending auth data to parent window');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É
        window.opener.postMessage({
          type: 'GOOGLE_AUTH_SUCCESS',
          token,
          user
        }, window.location.origin);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
        window.close();
      } else {
        // –û–±—ã—á–Ω—ã–π callback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å signIn –∏–∑ AuthContext
        await signIn(token, user);
        console.log('‚úÖ SignIn completed via Google OAuth');

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if (user.role === 'admin') {
          console.log('üîÑ Redirecting to admin dashboard');
          router.replace('/(admin)/dashboard');
        } else {
          console.log('üîÑ Redirecting to user home');
          router.replace('/(user)/home');
        }
      }
    } catch (err) {
      console.error('‚ùå Callback error:', err);
      
      // –ï—Å–ª–∏ —ç—Ç–æ popup –æ–∫–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
      if (Platform.OS === 'web' && typeof window !== 'undefined' && window.opener) {
        window.opener.postMessage({
          type: 'GOOGLE_AUTH_ERROR',
          error: 'Failed to process auth data'
        }, window.location.origin);
        window.close();
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        setTimeout(() => router.replace('/auth/login'), 2000);
      }
    }
  };

  return (
    <View style={styles.container}>
      {error ? (
        <>
          <Text style={styles.errorIcon}>‚ö†Ô∏è</Text>
          <Text style={styles.errorText}>{error}</Text>
          <Text style={styles.subText}>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...</Text>
        </>
      ) : (
        <>
          <ActivityIndicator size="large" color="#667eea" />
          <Text style={styles.loadingText}>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</Text>
          <Text style={styles.subText}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</Text>
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    padding: 20,
  },
  loadingText: {
    marginTop: 20,
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  subText: {
    marginTop: 8,
    fontSize: 14,
    color: '#666',
  },
  errorIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  errorText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#d32f2f',
    textAlign: 'center',
    marginBottom: 8,
  },
});