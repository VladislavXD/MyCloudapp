import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Platform, StyleSheet, Text, View } from 'react-native';
import { useAuth } from '../context/AuthContext';


export default function CallbackScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const { signIn } = useAuth();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    handleCallback();
  }, []);

  const handleCallback = async () => {
    try {
      console.log('üîÑ Callback params:', params);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É
      if (params.error) {
        console.error('‚ùå Auth error from server:', params.error);
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google');
        setTimeout(() => router.replace('/auth/login'), 2000);
        return;
      }
      
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const token = params.token as string;
      let userStr = params.user as string;

      if (!token || !userStr) {
        console.error('‚ùå Missing token or user data');
        setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ');
        setTimeout(() => router.replace('/auth/login'), 2000);
        return;
      }

      // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª #
      userStr = decodeURIComponent(userStr);
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ # (hash fragment)
      userStr = userStr.replace(/#.*$/, '');
      
      const user = JSON.parse(userStr);
      console.log('‚úÖ User data received:', user);

      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å signIn –∏–∑ AuthContext
      await signIn(token, user);
      console.log('‚úÖ SignIn completed via Google OAuth');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
      if (user.role === 'admin') {
        console.log('üîÑ Redirecting to admin dashboard');
        router.replace('/(admin)/dashboard');
      } else {
        console.log('üîÑ Redirecting to user home');
        router.replace('/(user)/home');
      }
    } catch (err) {
      console.error('‚ùå Callback error:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      setTimeout(() => router.replace('/auth/login'), 2000);
    }
  };

  return (
    <View style={styles.container}>
      {error ? (
        <>
          <Text style={styles.errorIcon}>‚ö†Ô∏è</Text>
          <Text style={styles.errorText}>{error}</Text>
          <Text style={styles.subText}>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...</Text>
        </>
      ) : (
        <>
          <ActivityIndicator size="large" color="#667eea" />
          <Text style={styles.loadingText}>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</Text>
          <Text style={styles.subText}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</Text>
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    padding: 20,
  },
  loadingText: {
    marginTop: 20,
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  subText: {
    marginTop: 8,
    fontSize: 14,
    color: '#666',
  },
  errorIcon: {
    fontSize: 48,
    marginBottom: 16,
  },
  errorText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#d32f2f',
    textAlign: 'center',
    marginBottom: 8,
  },
});