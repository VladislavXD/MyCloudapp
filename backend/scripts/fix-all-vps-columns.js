#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã vps_plans
 * 
 * –ü—Ä–æ–±–ª–µ–º—ã:
 * 1. –î—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–ª–æ–Ω–æ–∫: memory_gb + ram_gb, price_per_month + price_monthly, plan_name + name
 * 2. –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: name, ram_gb, bandwidth_gb, price_monthly
 * 3. –¢–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç: plan_name, memory_gb, bandwidth_tb, price_per_month
 * 
 * –†–µ—à–µ–Ω–∏–µ: –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥
 */

require('dotenv').config();
const db = require('../core/db/connection');

async function fixAllColumns() {
  console.log('üîß –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã vps_plans...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const columns = await db.query('DESCRIBE vps_plans');
    console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:');
    columns.forEach(col => {
      console.log(`  - ${col.Field} (${col.Type})`);
    });
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const columnNames = columns.map(c => c.Field);
    
    const hasPlanName = columnNames.includes('plan_name');
    const hasName = columnNames.includes('name');
    const hasMemoryGb = columnNames.includes('memory_gb');
    const hasRamGb = columnNames.includes('ram_gb');
    const hasPricePerMonth = columnNames.includes('price_per_month');
    const hasPriceMonthly = columnNames.includes('price_monthly');
    const hasBandwidthTb = columnNames.includes('bandwidth_tb');
    const hasBandwidthGb = columnNames.includes('bandwidth_gb');
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–æ–Ω–æ–∫:');
    console.log(`  plan_name: ${hasPlanName ? '‚úÖ' : '‚ùå'} | name: ${hasName ? '‚úÖ' : '‚ùå'} (–Ω—É–∂–µ–Ω: name)`);
    console.log(`  memory_gb: ${hasMemoryGb ? '‚úÖ' : '‚ùå'} | ram_gb: ${hasRamGb ? '‚úÖ' : '‚ùå'} (–Ω—É–∂–µ–Ω: ram_gb)`);
    console.log(`  price_per_month: ${hasPricePerMonth ? '‚úÖ' : '‚ùå'} | price_monthly: ${hasPriceMonthly ? '‚úÖ' : '‚ùå'} (–Ω—É–∂–µ–Ω: price_monthly)`);
    console.log(`  bandwidth_tb: ${hasBandwidthTb ? '‚úÖ' : '‚ùå'} | bandwidth_gb: ${hasBandwidthGb ? '‚úÖ' : '‚ùå'} (–Ω—É–∂–µ–Ω: bandwidth_gb)`);
    console.log('');
    
    let changesMade = false;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º plan_name ‚Üí name
    if (hasPlanName && !hasName) {
      console.log('üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é plan_name ‚Üí name');
      await db.query('ALTER TABLE vps_plans CHANGE COLUMN plan_name name VARCHAR(255) NOT NULL');
      changesMade = true;
    } else if (hasPlanName && hasName) {
      console.log('üóëÔ∏è  –£–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç plan_name (–æ—Å—Ç–∞–≤–ª—è—é name)');
      await db.query('ALTER TABLE vps_plans DROP COLUMN plan_name');
      changesMade = true;
    }
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º memory_gb ‚Üí ram_gb
    if (hasMemoryGb && !hasRamGb) {
      console.log('üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é memory_gb ‚Üí ram_gb');
      await db.query('ALTER TABLE vps_plans CHANGE COLUMN memory_gb ram_gb INT NOT NULL');
      changesMade = true;
    } else if (hasMemoryGb && hasRamGb) {
      console.log('üóëÔ∏è  –£–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç memory_gb (–æ—Å—Ç–∞–≤–ª—è—é ram_gb)');
      await db.query('ALTER TABLE vps_plans DROP COLUMN memory_gb');
      changesMade = true;
    }
    
    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º price_per_month ‚Üí price_monthly
    if (hasPricePerMonth && !hasPriceMonthly) {
      console.log('üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é price_per_month ‚Üí price_monthly');
      await db.query('ALTER TABLE vps_plans CHANGE COLUMN price_per_month price_monthly DECIMAL(10,2) NOT NULL');
      changesMade = true;
    } else if (hasPricePerMonth && hasPriceMonthly) {
      console.log('üóëÔ∏è  –£–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç price_per_month (–æ—Å—Ç–∞–≤–ª—è—é price_monthly)');
      await db.query('ALTER TABLE vps_plans DROP COLUMN price_per_month');
      changesMade = true;
    }
    
    // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º bandwidth_tb ‚Üí bandwidth_gb
    if (hasBandwidthTb && !hasBandwidthGb) {
      console.log('üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é bandwidth_tb ‚Üí bandwidth_gb');
      await db.query('ALTER TABLE vps_plans CHANGE COLUMN bandwidth_tb bandwidth_gb INT NOT NULL');
      changesMade = true;
    } else if (hasBandwidthTb && hasBandwidthGb) {
      console.log('üóëÔ∏è  –£–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç bandwidth_tb (–æ—Å—Ç–∞–≤–ª—è—é bandwidth_gb)');
      await db.query('ALTER TABLE vps_plans DROP COLUMN bandwidth_tb');
      changesMade = true;
    }
    
    if (!changesMade) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!');
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
      const finalColumns = await db.query('DESCRIBE vps_plans');
      finalColumns.forEach(col => {
        const marker = ['name', 'ram_gb', 'price_monthly', 'bandwidth_gb'].includes(col.Field) ? '‚úÖ' : '  ';
        console.log(`${marker} ${col.Field} (${col.Type})`);
      });
      
      console.log('\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
fixAllColumns();
